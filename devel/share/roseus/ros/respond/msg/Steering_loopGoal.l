;; Auto-generated. Do not edit!


(when (boundp 'respond::Steering_loopGoal)
  (if (not (find-package "RESPOND"))
    (make-package "RESPOND"))
  (shadow 'Steering_loopGoal (find-package "RESPOND")))
(unless (find-package "RESPOND::STEERING_LOOPGOAL")
  (make-package "RESPOND::STEERING_LOOPGOAL"))

(in-package "ROS")
;;//! \htmlinclude Steering_loopGoal.msg.html


(defclass respond::Steering_loopGoal
  :super ros::object
  :slots (_new_position ))

(defmethod respond::Steering_loopGoal
  (:init
   (&key
    ((:new_position __new_position) 0.0)
    )
   (send-super :init)
   (setq _new_position (float __new_position))
   self)
  (:new_position
   (&optional __new_position)
   (if __new_position (setq _new_position __new_position)) _new_position)
  (:serialization-length
   ()
   (+
    ;; float32 _new_position
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _new_position
       (sys::poke _new_position (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _new_position
     (setq _new_position (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get respond::Steering_loopGoal :md5sum-) "940f1920ef9177c4320784fe9585b6e9")
(setf (get respond::Steering_loopGoal :datatype-) "respond/Steering_loopGoal")
(setf (get respond::Steering_loopGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
float32 new_position  # Specify which dishwasher we want to use

")



(provide :respond/Steering_loopGoal "940f1920ef9177c4320784fe9585b6e9")


