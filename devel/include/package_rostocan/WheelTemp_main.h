// Generated by gencpp from file package_rostocan/WheelTemp_main.msg
// DO NOT EDIT!


#ifndef PACKAGE_ROSTOCAN_MESSAGE_WHEELTEMP_MAIN_H
#define PACKAGE_ROSTOCAN_MESSAGE_WHEELTEMP_MAIN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace package_rostocan
{
template <class ContainerAllocator>
struct WheelTemp_main_
{
  typedef WheelTemp_main_<ContainerAllocator> Type;

  WheelTemp_main_()
    : wheelTemp0(0)
    , wheelTemp1(0)
    , wheelTemp2(0)
    , wheelTemp3(0)
    , wheelTemp4(0)
    , wheelTemp5(0)
    , wheelTemp6(0)
    , wheelTemp7(0)  {
    }
  WheelTemp_main_(const ContainerAllocator& _alloc)
    : wheelTemp0(0)
    , wheelTemp1(0)
    , wheelTemp2(0)
    , wheelTemp3(0)
    , wheelTemp4(0)
    , wheelTemp5(0)
    , wheelTemp6(0)
    , wheelTemp7(0)  {
  (void)_alloc;
    }



   typedef uint8_t _wheelTemp0_type;
  _wheelTemp0_type wheelTemp0;

   typedef uint8_t _wheelTemp1_type;
  _wheelTemp1_type wheelTemp1;

   typedef uint8_t _wheelTemp2_type;
  _wheelTemp2_type wheelTemp2;

   typedef uint8_t _wheelTemp3_type;
  _wheelTemp3_type wheelTemp3;

   typedef uint8_t _wheelTemp4_type;
  _wheelTemp4_type wheelTemp4;

   typedef uint8_t _wheelTemp5_type;
  _wheelTemp5_type wheelTemp5;

   typedef uint8_t _wheelTemp6_type;
  _wheelTemp6_type wheelTemp6;

   typedef uint8_t _wheelTemp7_type;
  _wheelTemp7_type wheelTemp7;





  typedef boost::shared_ptr< ::package_rostocan::WheelTemp_main_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::package_rostocan::WheelTemp_main_<ContainerAllocator> const> ConstPtr;

}; // struct WheelTemp_main_

typedef ::package_rostocan::WheelTemp_main_<std::allocator<void> > WheelTemp_main;

typedef boost::shared_ptr< ::package_rostocan::WheelTemp_main > WheelTemp_mainPtr;
typedef boost::shared_ptr< ::package_rostocan::WheelTemp_main const> WheelTemp_mainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::package_rostocan::WheelTemp_main_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::package_rostocan::WheelTemp_main_<ContainerAllocator1> & lhs, const ::package_rostocan::WheelTemp_main_<ContainerAllocator2> & rhs)
{
  return lhs.wheelTemp0 == rhs.wheelTemp0 &&
    lhs.wheelTemp1 == rhs.wheelTemp1 &&
    lhs.wheelTemp2 == rhs.wheelTemp2 &&
    lhs.wheelTemp3 == rhs.wheelTemp3 &&
    lhs.wheelTemp4 == rhs.wheelTemp4 &&
    lhs.wheelTemp5 == rhs.wheelTemp5 &&
    lhs.wheelTemp6 == rhs.wheelTemp6 &&
    lhs.wheelTemp7 == rhs.wheelTemp7;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::package_rostocan::WheelTemp_main_<ContainerAllocator1> & lhs, const ::package_rostocan::WheelTemp_main_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace package_rostocan

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package_rostocan::WheelTemp_main_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package_rostocan::WheelTemp_main_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package_rostocan::WheelTemp_main_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c711a199bb8f11b65e72f22df1be55d";
  }

  static const char* value(const ::package_rostocan::WheelTemp_main_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c711a199bb8f11bULL;
  static const uint64_t static_value2 = 0x65e72f22df1be55dULL;
};

template<class ContainerAllocator>
struct DataType< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package_rostocan/WheelTemp_main";
  }

  static const char* value(const ::package_rostocan::WheelTemp_main_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 wheelTemp0\n"
"uint8 wheelTemp1\n"
"uint8 wheelTemp2\n"
"uint8 wheelTemp3\n"
"uint8 wheelTemp4\n"
"uint8 wheelTemp5\n"
"uint8 wheelTemp6\n"
"uint8 wheelTemp7\n"
;
  }

  static const char* value(const ::package_rostocan::WheelTemp_main_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheelTemp0);
      stream.next(m.wheelTemp1);
      stream.next(m.wheelTemp2);
      stream.next(m.wheelTemp3);
      stream.next(m.wheelTemp4);
      stream.next(m.wheelTemp5);
      stream.next(m.wheelTemp6);
      stream.next(m.wheelTemp7);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelTemp_main_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::package_rostocan::WheelTemp_main_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::package_rostocan::WheelTemp_main_<ContainerAllocator>& v)
  {
    s << indent << "wheelTemp0: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp0);
    s << indent << "wheelTemp1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp1);
    s << indent << "wheelTemp2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp2);
    s << indent << "wheelTemp3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp3);
    s << indent << "wheelTemp4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp4);
    s << indent << "wheelTemp5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp5);
    s << indent << "wheelTemp6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp6);
    s << indent << "wheelTemp7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheelTemp7);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACKAGE_ROSTOCAN_MESSAGE_WHEELTEMP_MAIN_H
