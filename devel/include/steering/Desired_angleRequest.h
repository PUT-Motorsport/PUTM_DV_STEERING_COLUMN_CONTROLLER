// Generated by gencpp from file steering/Desired_angleRequest.msg
// DO NOT EDIT!


#ifndef STEERING_MESSAGE_DESIRED_ANGLEREQUEST_H
#define STEERING_MESSAGE_DESIRED_ANGLEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace steering
{
template <class ContainerAllocator>
struct Desired_angleRequest_
{
  typedef Desired_angleRequest_<ContainerAllocator> Type;

  Desired_angleRequest_()
    : desired_steer_angle(0.0)  {
    }
  Desired_angleRequest_(const ContainerAllocator& _alloc)
    : desired_steer_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _desired_steer_angle_type;
  _desired_steer_angle_type desired_steer_angle;





  typedef boost::shared_ptr< ::steering::Desired_angleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::steering::Desired_angleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Desired_angleRequest_

typedef ::steering::Desired_angleRequest_<std::allocator<void> > Desired_angleRequest;

typedef boost::shared_ptr< ::steering::Desired_angleRequest > Desired_angleRequestPtr;
typedef boost::shared_ptr< ::steering::Desired_angleRequest const> Desired_angleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::steering::Desired_angleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::steering::Desired_angleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::steering::Desired_angleRequest_<ContainerAllocator1> & lhs, const ::steering::Desired_angleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.desired_steer_angle == rhs.desired_steer_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::steering::Desired_angleRequest_<ContainerAllocator1> & lhs, const ::steering::Desired_angleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace steering

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::steering::Desired_angleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::steering::Desired_angleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::steering::Desired_angleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::steering::Desired_angleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::steering::Desired_angleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::steering::Desired_angleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::steering::Desired_angleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2197e575cb23de9c7e90371a9aa2af61";
  }

  static const char* value(const ::steering::Desired_angleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2197e575cb23de9cULL;
  static const uint64_t static_value2 = 0x7e90371a9aa2af61ULL;
};

template<class ContainerAllocator>
struct DataType< ::steering::Desired_angleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "steering/Desired_angleRequest";
  }

  static const char* value(const ::steering::Desired_angleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::steering::Desired_angleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 desired_steer_angle\n"
;
  }

  static const char* value(const ::steering::Desired_angleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::steering::Desired_angleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.desired_steer_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Desired_angleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::steering::Desired_angleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::steering::Desired_angleRequest_<ContainerAllocator>& v)
  {
    s << indent << "desired_steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.desired_steer_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STEERING_MESSAGE_DESIRED_ANGLEREQUEST_H
