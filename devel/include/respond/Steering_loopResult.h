// Generated by gencpp from file respond/Steering_loopResult.msg
// DO NOT EDIT!


#ifndef RESPOND_MESSAGE_STEERING_LOOPRESULT_H
#define RESPOND_MESSAGE_STEERING_LOOPRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace respond
{
template <class ContainerAllocator>
struct Steering_loopResult_
{
  typedef Steering_loopResult_<ContainerAllocator> Type;

  Steering_loopResult_()
    : movement_done(false)  {
    }
  Steering_loopResult_(const ContainerAllocator& _alloc)
    : movement_done(false)  {
  (void)_alloc;
    }



   typedef uint8_t _movement_done_type;
  _movement_done_type movement_done;





  typedef boost::shared_ptr< ::respond::Steering_loopResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::respond::Steering_loopResult_<ContainerAllocator> const> ConstPtr;

}; // struct Steering_loopResult_

typedef ::respond::Steering_loopResult_<std::allocator<void> > Steering_loopResult;

typedef boost::shared_ptr< ::respond::Steering_loopResult > Steering_loopResultPtr;
typedef boost::shared_ptr< ::respond::Steering_loopResult const> Steering_loopResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::respond::Steering_loopResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::respond::Steering_loopResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::respond::Steering_loopResult_<ContainerAllocator1> & lhs, const ::respond::Steering_loopResult_<ContainerAllocator2> & rhs)
{
  return lhs.movement_done == rhs.movement_done;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::respond::Steering_loopResult_<ContainerAllocator1> & lhs, const ::respond::Steering_loopResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace respond

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::respond::Steering_loopResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::respond::Steering_loopResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::respond::Steering_loopResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::respond::Steering_loopResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::respond::Steering_loopResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::respond::Steering_loopResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::respond::Steering_loopResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fa7b13e5c043e733d74b099cb87b938";
  }

  static const char* value(const ::respond::Steering_loopResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fa7b13e5c043e73ULL;
  static const uint64_t static_value2 = 0x3d74b099cb87b938ULL;
};

template<class ContainerAllocator>
struct DataType< ::respond::Steering_loopResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "respond/Steering_loopResult";
  }

  static const char* value(const ::respond::Steering_loopResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::respond::Steering_loopResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"bool movement_done\n"
;
  }

  static const char* value(const ::respond::Steering_loopResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::respond::Steering_loopResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.movement_done);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Steering_loopResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::respond::Steering_loopResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::respond::Steering_loopResult_<ContainerAllocator>& v)
  {
    s << indent << "movement_done: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.movement_done);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RESPOND_MESSAGE_STEERING_LOOPRESULT_H
