# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from package_rostocan/WheelTemp_main.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WheelTemp_main(genpy.Message):
  _md5sum = "2c711a199bb8f11b65e72f22df1be55d"
  _type = "package_rostocan/WheelTemp_main"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 wheelTemp0
uint8 wheelTemp1
uint8 wheelTemp2
uint8 wheelTemp3
uint8 wheelTemp4
uint8 wheelTemp5
uint8 wheelTemp6
uint8 wheelTemp7"""
  __slots__ = ['wheelTemp0','wheelTemp1','wheelTemp2','wheelTemp3','wheelTemp4','wheelTemp5','wheelTemp6','wheelTemp7']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wheelTemp0,wheelTemp1,wheelTemp2,wheelTemp3,wheelTemp4,wheelTemp5,wheelTemp6,wheelTemp7

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WheelTemp_main, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.wheelTemp0 is None:
        self.wheelTemp0 = 0
      if self.wheelTemp1 is None:
        self.wheelTemp1 = 0
      if self.wheelTemp2 is None:
        self.wheelTemp2 = 0
      if self.wheelTemp3 is None:
        self.wheelTemp3 = 0
      if self.wheelTemp4 is None:
        self.wheelTemp4 = 0
      if self.wheelTemp5 is None:
        self.wheelTemp5 = 0
      if self.wheelTemp6 is None:
        self.wheelTemp6 = 0
      if self.wheelTemp7 is None:
        self.wheelTemp7 = 0
    else:
      self.wheelTemp0 = 0
      self.wheelTemp1 = 0
      self.wheelTemp2 = 0
      self.wheelTemp3 = 0
      self.wheelTemp4 = 0
      self.wheelTemp5 = 0
      self.wheelTemp6 = 0
      self.wheelTemp7 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.wheelTemp0, _x.wheelTemp1, _x.wheelTemp2, _x.wheelTemp3, _x.wheelTemp4, _x.wheelTemp5, _x.wheelTemp6, _x.wheelTemp7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.wheelTemp0, _x.wheelTemp1, _x.wheelTemp2, _x.wheelTemp3, _x.wheelTemp4, _x.wheelTemp5, _x.wheelTemp6, _x.wheelTemp7,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8B().pack(_x.wheelTemp0, _x.wheelTemp1, _x.wheelTemp2, _x.wheelTemp3, _x.wheelTemp4, _x.wheelTemp5, _x.wheelTemp6, _x.wheelTemp7))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.wheelTemp0, _x.wheelTemp1, _x.wheelTemp2, _x.wheelTemp3, _x.wheelTemp4, _x.wheelTemp5, _x.wheelTemp6, _x.wheelTemp7,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
