# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from steering/Odrive_commandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Odrive_commandRequest(genpy.Message):
  _md5sum = "b8fe282d5250df9b15d2d8e86d273add"
  _type = "steering/Odrive_commandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 command
int8 Axis_State
int32 Control_Mode
int32 Input_Mode
float32 Input_Position
uint16 Input_Velocity_FF
uint16 Input_Torque_FF
float32 Input_Torque
float32 Velocity_Limit
float32 Current_Limit
float32 Traj_Velocity_Limit
float32 Traj_Accel_Limit
float32 Traj_Decel_Limit
float32 Traj_Inertia
float32 Position
float32 Pos_Gain
float32 Vel_Gain
float32 Vel_Integrator_Gain
"""
  __slots__ = ['command','Axis_State','Control_Mode','Input_Mode','Input_Position','Input_Velocity_FF','Input_Torque_FF','Input_Torque','Velocity_Limit','Current_Limit','Traj_Velocity_Limit','Traj_Accel_Limit','Traj_Decel_Limit','Traj_Inertia','Position','Pos_Gain','Vel_Gain','Vel_Integrator_Gain']
  _slot_types = ['float64','int8','int32','int32','float32','uint16','uint16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,Axis_State,Control_Mode,Input_Mode,Input_Position,Input_Velocity_FF,Input_Torque_FF,Input_Torque,Velocity_Limit,Current_Limit,Traj_Velocity_Limit,Traj_Accel_Limit,Traj_Decel_Limit,Traj_Inertia,Position,Pos_Gain,Vel_Gain,Vel_Integrator_Gain

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Odrive_commandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0.
      if self.Axis_State is None:
        self.Axis_State = 0
      if self.Control_Mode is None:
        self.Control_Mode = 0
      if self.Input_Mode is None:
        self.Input_Mode = 0
      if self.Input_Position is None:
        self.Input_Position = 0.
      if self.Input_Velocity_FF is None:
        self.Input_Velocity_FF = 0
      if self.Input_Torque_FF is None:
        self.Input_Torque_FF = 0
      if self.Input_Torque is None:
        self.Input_Torque = 0.
      if self.Velocity_Limit is None:
        self.Velocity_Limit = 0.
      if self.Current_Limit is None:
        self.Current_Limit = 0.
      if self.Traj_Velocity_Limit is None:
        self.Traj_Velocity_Limit = 0.
      if self.Traj_Accel_Limit is None:
        self.Traj_Accel_Limit = 0.
      if self.Traj_Decel_Limit is None:
        self.Traj_Decel_Limit = 0.
      if self.Traj_Inertia is None:
        self.Traj_Inertia = 0.
      if self.Position is None:
        self.Position = 0.
      if self.Pos_Gain is None:
        self.Pos_Gain = 0.
      if self.Vel_Gain is None:
        self.Vel_Gain = 0.
      if self.Vel_Integrator_Gain is None:
        self.Vel_Integrator_Gain = 0.
    else:
      self.command = 0.
      self.Axis_State = 0
      self.Control_Mode = 0
      self.Input_Mode = 0
      self.Input_Position = 0.
      self.Input_Velocity_FF = 0
      self.Input_Torque_FF = 0
      self.Input_Torque = 0.
      self.Velocity_Limit = 0.
      self.Current_Limit = 0.
      self.Traj_Velocity_Limit = 0.
      self.Traj_Accel_Limit = 0.
      self.Traj_Decel_Limit = 0.
      self.Traj_Inertia = 0.
      self.Position = 0.
      self.Pos_Gain = 0.
      self.Vel_Gain = 0.
      self.Vel_Integrator_Gain = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_db2if2H11f().pack(_x.command, _x.Axis_State, _x.Control_Mode, _x.Input_Mode, _x.Input_Position, _x.Input_Velocity_FF, _x.Input_Torque_FF, _x.Input_Torque, _x.Velocity_Limit, _x.Current_Limit, _x.Traj_Velocity_Limit, _x.Traj_Accel_Limit, _x.Traj_Decel_Limit, _x.Traj_Inertia, _x.Position, _x.Pos_Gain, _x.Vel_Gain, _x.Vel_Integrator_Gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 69
      (_x.command, _x.Axis_State, _x.Control_Mode, _x.Input_Mode, _x.Input_Position, _x.Input_Velocity_FF, _x.Input_Torque_FF, _x.Input_Torque, _x.Velocity_Limit, _x.Current_Limit, _x.Traj_Velocity_Limit, _x.Traj_Accel_Limit, _x.Traj_Decel_Limit, _x.Traj_Inertia, _x.Position, _x.Pos_Gain, _x.Vel_Gain, _x.Vel_Integrator_Gain,) = _get_struct_db2if2H11f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_db2if2H11f().pack(_x.command, _x.Axis_State, _x.Control_Mode, _x.Input_Mode, _x.Input_Position, _x.Input_Velocity_FF, _x.Input_Torque_FF, _x.Input_Torque, _x.Velocity_Limit, _x.Current_Limit, _x.Traj_Velocity_Limit, _x.Traj_Accel_Limit, _x.Traj_Decel_Limit, _x.Traj_Inertia, _x.Position, _x.Pos_Gain, _x.Vel_Gain, _x.Vel_Integrator_Gain))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 69
      (_x.command, _x.Axis_State, _x.Control_Mode, _x.Input_Mode, _x.Input_Position, _x.Input_Velocity_FF, _x.Input_Torque_FF, _x.Input_Torque, _x.Velocity_Limit, _x.Current_Limit, _x.Traj_Velocity_Limit, _x.Traj_Accel_Limit, _x.Traj_Decel_Limit, _x.Traj_Inertia, _x.Position, _x.Pos_Gain, _x.Vel_Gain, _x.Vel_Integrator_Gain,) = _get_struct_db2if2H11f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_db2if2H11f = None
def _get_struct_db2if2H11f():
    global _struct_db2if2H11f
    if _struct_db2if2H11f is None:
        _struct_db2if2H11f = struct.Struct("<db2if2H11f")
    return _struct_db2if2H11f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from steering/Odrive_commandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Odrive_commandResponse(genpy.Message):
  _md5sum = "d3731a249632fa4e65bace96bcb5c3f6"
  _type = "steering/Odrive_commandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 Axis_Error
int8 Axis_State
int32 Active_Errors
int32 Disarm_Reason
int32 Pos_Estimate
int32 Vel_Estimate
int32 Iq_Setpoint
int32 Iq_Measured
int32 FET_Temperature
int32 Motor_Temperature
int32 Vbus_Voltage
int32 Vbus_Current
"""
  __slots__ = ['Axis_Error','Axis_State','Active_Errors','Disarm_Reason','Pos_Estimate','Vel_Estimate','Iq_Setpoint','Iq_Measured','FET_Temperature','Motor_Temperature','Vbus_Voltage','Vbus_Current']
  _slot_types = ['int32','int8','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Axis_Error,Axis_State,Active_Errors,Disarm_Reason,Pos_Estimate,Vel_Estimate,Iq_Setpoint,Iq_Measured,FET_Temperature,Motor_Temperature,Vbus_Voltage,Vbus_Current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Odrive_commandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Axis_Error is None:
        self.Axis_Error = 0
      if self.Axis_State is None:
        self.Axis_State = 0
      if self.Active_Errors is None:
        self.Active_Errors = 0
      if self.Disarm_Reason is None:
        self.Disarm_Reason = 0
      if self.Pos_Estimate is None:
        self.Pos_Estimate = 0
      if self.Vel_Estimate is None:
        self.Vel_Estimate = 0
      if self.Iq_Setpoint is None:
        self.Iq_Setpoint = 0
      if self.Iq_Measured is None:
        self.Iq_Measured = 0
      if self.FET_Temperature is None:
        self.FET_Temperature = 0
      if self.Motor_Temperature is None:
        self.Motor_Temperature = 0
      if self.Vbus_Voltage is None:
        self.Vbus_Voltage = 0
      if self.Vbus_Current is None:
        self.Vbus_Current = 0
    else:
      self.Axis_Error = 0
      self.Axis_State = 0
      self.Active_Errors = 0
      self.Disarm_Reason = 0
      self.Pos_Estimate = 0
      self.Vel_Estimate = 0
      self.Iq_Setpoint = 0
      self.Iq_Measured = 0
      self.FET_Temperature = 0
      self.Motor_Temperature = 0
      self.Vbus_Voltage = 0
      self.Vbus_Current = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_ib10i().pack(_x.Axis_Error, _x.Axis_State, _x.Active_Errors, _x.Disarm_Reason, _x.Pos_Estimate, _x.Vel_Estimate, _x.Iq_Setpoint, _x.Iq_Measured, _x.FET_Temperature, _x.Motor_Temperature, _x.Vbus_Voltage, _x.Vbus_Current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.Axis_Error, _x.Axis_State, _x.Active_Errors, _x.Disarm_Reason, _x.Pos_Estimate, _x.Vel_Estimate, _x.Iq_Setpoint, _x.Iq_Measured, _x.FET_Temperature, _x.Motor_Temperature, _x.Vbus_Voltage, _x.Vbus_Current,) = _get_struct_ib10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_ib10i().pack(_x.Axis_Error, _x.Axis_State, _x.Active_Errors, _x.Disarm_Reason, _x.Pos_Estimate, _x.Vel_Estimate, _x.Iq_Setpoint, _x.Iq_Measured, _x.FET_Temperature, _x.Motor_Temperature, _x.Vbus_Voltage, _x.Vbus_Current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.Axis_Error, _x.Axis_State, _x.Active_Errors, _x.Disarm_Reason, _x.Pos_Estimate, _x.Vel_Estimate, _x.Iq_Setpoint, _x.Iq_Measured, _x.FET_Temperature, _x.Motor_Temperature, _x.Vbus_Voltage, _x.Vbus_Current,) = _get_struct_ib10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_ib10i = None
def _get_struct_ib10i():
    global _struct_ib10i
    if _struct_ib10i is None:
        _struct_ib10i = struct.Struct("<ib10i")
    return _struct_ib10i
class Odrive_command(object):
  _type          = 'steering/Odrive_command'
  _md5sum = '82e9f30ff634c6c0e7b35b96a15643a9'
  _request_class  = Odrive_commandRequest
  _response_class = Odrive_commandResponse
